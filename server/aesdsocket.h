#pragma once

#define USE_AESD_CHAR_DEVICE

#include "./queue.h"
#include <stdbool.h>
#include <pthread.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <netdb.h>
#include <syslog.h>
#include <fcntl.h>
#include <unistd.h>
#include <signal.h>
#include <sys/time.h>

#define BACKLOG     1
#define BUFF_SIZE   256

#ifdef USE_AESD_CHAR_DEVICE
const char OUTPUT_FILEPATH[] = "/dev/aesdchar";
#else
const char OUTPUT_FILEPATH[] = "/var/tmp/aesdsocketdata";
#endif
const char SERVER_PORT[] = "9000";

const char IOCSEEK_CMD_STR[] = "AESDCHAR_IOCSEEKTO:";

typedef enum command_parser_state_s
{
    NOT_CMD,
    HEADER,
    ARG_X,
    ARG_Y,
} command_parser_state_t;

#define AESD_IOC_MAGIC 0x16

// Define a write command from the user point of view, use command number 1
#define AESDCHAR_IOCSEEKTO _IOWR(AESD_IOC_MAGIC, 1, struct aesd_seekto)

/**
 * A structure to be passed by IOCTL from user space to kernel space, describing the type
 * of seek performed on the aesdchar driver
 */
struct aesd_seekto {
    /**
     * The zero referenced write command to seek into
     */
    uint32_t write_cmd;
    /**
     * The zero referenced offset within the write
     */
    uint32_t write_cmd_offset;
};

typedef struct socket_data_s socket_data_t;

struct socket_data_s{
    pthread_t threadHandle;
    int connectedSock;
    struct sockaddr peeraddr;
    bool threadCompleteFlag;
    SLIST_ENTRY(socket_data_s) entries;
};

/**
 * @brief Create a Stream Socket object
 * 
 * @param portNumberStr The desired port number to have stream socket server listen to. Input as string
 * @return int 
 * @retval -1 Error
 * @retval  0 Success
 */
int createStreamSocket(const char *portNumberStr);

int listenForConnections(int sockfd, socket_data_t **newListElement);

void* recvAndSendAndLog(void* socket_data_arg);

/**
 * @brief Check input to the application for validity
 * 
 * @param argc Number of arguments
 * @param argv Vector of arguments
 * @return int 
 * @retval -1 Error
 * @retval  0 Success
 */
int checkInput(int argc, char *argv[]);

#ifdef USE_AESD_CHAR_DEVICE
int setupTimer();
#endif

/**
 * @brief Exit gracefully, freeing the sockaddr structs generated by getaddrinfo()
 *  and closing the log
 * 
 * @param returnVal Value to be returned by this function (allows it to be used as 
 *  return graceful_exit() directly in main)
 * @return int 
 * @retval Whatever input returnVal is
 */
int graceful_exit(int returnVal);